import { Readable } from 'stream'
import readLine from 'readline'

import { Request, Response } from 'express'
import { prisma } from '../../database/client'

interface CustomerService {
  date: string
  name: string
  phoneNumber: string
  cpfCnpj: string
  response: string
  option: number | string
  protocol: string
  code: string
  externalNumber: string
  agent: string
  channel: string
  account: string
  service: string
  uf: string
}

export async function createCustomerServices(req: Request, res: Response) {
  try {
    if (!req.file) {
      return res.status(400).json({ message: 'File is required' })
    }

    const { buffer } = req.file

    const readableFile = new Readable()
    readableFile.push(buffer)
    readableFile.push(null)

    return res.json(buffer.toString('utf-8'))

    const customerServicesLine = readLine.createInterface({
      input: readableFile,
    })

    const customerServicesWithHeader: CustomerService[] = []

    for await (let line of customerServicesLine) {
      const [date, name, phoneNumber, cpfCnpj, response, option, protocol, code, externalNumber, agent, channel, account, service, uf] = line.split(';')

      customerServicesWithHeader.push({
        date,
        name,
        phoneNumber,
        cpfCnpj,
        response,
        option,
        protocol,
        code,
        externalNumber,
        agent,
        channel,
        account,
        service,
        uf,
      })
    }

    const [_, ...customerServices] = customerServicesWithHeader

    for (let {
      date,
      name,
      phoneNumber,
      cpfCnpj,
      response,
      option,
      protocol,
      code,
      externalNumber,
      agent,
      channel,
      account,
      service,
      uf,
    } of customerServices) {
      const customerService = await prisma.customerService.findUnique({
        where: {
          protocol,
        }
      })


      if (!customerService) {
        await prisma.customerService.create({
          data: {
            date,
            name,
            phone_number: phoneNumber,
            cpf_cnpj: cpfCnpj,
            response,
            option: Number(option),
            protocol,
            code,
            external_number: externalNumber,
            agent,
            channel,
            account,
            service,
            uf,
          }
        })
      }
    }

    return res.sendStatus(201)
  } catch (error) {
    console.log(error);
    res.sendStatus(500);
  }
}